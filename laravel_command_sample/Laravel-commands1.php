<?php
/**  Laravelコマンド一覧

cd パス名    対象ディレクトリへの移動
※プロパティを開いて絶対パスを貼っても使える

---------------------------------------------------------------------------------------------------------

まずはこれ
composer create-project --prefer-dist laravel/laravel 任意のファイル名
移動したディレクトリ直下に入力したファイル名でlaravelのファイル一式作成
※Application key set successfullyなら成功

---------------------------------------------------------------------------------------------------------

php artisan serve Laravelサーバーの起動

----------------------------------------------------------------------------------------------------------

DBを作成後、envファイル14行目あたりのDB_DATABASEをphpadminで作成した名前に変更


----------------------------------------------------------------------------------------------------------

php artisan migrate     Laravelのマイグレーションファイルの内容がデータベースに反映、カラムを作る

-----------------------------------------------------------------------------------------------------

composer require laravel/breeze --dev

php artisan breeze:install

Breezeのインストール、ユーザー認証設定・ログイン画面を作る

※3つ出てくる質問には基本noで答える
Which testing framework do you prefer? [PHPUnit]
  PHPUnit .............0
  Pest ................ 1

※Breeze scaffolding installed successfully.なら成功

------------------------------------------------------------------------------------------------------------

タイムゾーンと言語の設定
config.php/app.phpのtimezoneをAsia/Tokyo、localeをjaに変更

テスト用のフェイク（ダミー）データを作る時の言語を指定
faker_locale をja_JPにする

-----------------------------------------------------------------------------------------------------

日本語訳の追加(チーム開発のLangフォルダをコピペ)
先にプロジェクト直下にlangフォルダを作り、それをいじって

composer require askdkc/breezejp --dev

php artisan breezejp

--------------------------------------------------------------------------------------------

composer require barryvdh/laravel-debugbar

php artisan serve でサーバーを起動したときにviewにデバッグバーを出す。
表示しない場合、リリースするときは.envの4行目のAPP_DEBUGをfalseにする

--------------------------------------------------------------------------------------------

お問い合わせ（Inquiry）という名前のモデル（データベースとLaravelをつなぐ役割をもつ）を作る場合
php artisan make:model Inquiry -m
⇒app/Modelsの中にInquiry.phpファイルが作成される
⇒databaseフォルダの中に【作成日_create_inquiries_table.php】という名前のファイルができている。

-----------------------------------------------------------------------------------------

class A(あるファイル名) extends B(もうひとつのある別のファイル名)
＝AはBを継承したクラスである。
上であればInquiryクラスはModelを継承したクラスという意味の注意書きが
Inquiry.phpにある

各モデルの項目は、database/migrations/【作成日_create_～（各モデル名）～_table.php】の
ファイルをいじる。
upメソッドの中のcreateメソッドの中に、
$table->～という形で必要なものを付け足していく

---------------------------------------------------------------------------------------------

$table->id();は自動で割り振られる番号
$table->timestamps() ;】は作成日と更新日のこと

$table->～で    ～というカラムがphpadminの対応データベースに追加される
なお～は日本語は不可、～のところをC('D')とすると、Cというデータ型の
Dという名前のカラムを追加するという意味になる

idは後々、いろいろなものと紐づけるためのキーにすることが多いが
名前を変えない方がよい

----------------------------------------------------------------------------------------------

foreach文はLaravelのview（bladeファイル）では
@foreach (配列名 as 配列内の要素に適当につけた名前)
{{ 処理（配列内の要素に適当につけた名前が入ることが多い） }}
@endforeach
という形で書く

例えば、
postsテーブルからデータを呼び出してforeachで表示させるには、Laravelでは、次のようにコードを入れる。

@foreach ($posts as $post)
{{$post->title}}    どうも->は「（メソッド等の）呼び出し」っぽい
{{$post->body}}
<img src="{{ asset('images/'.$post->image)}}">
@endforeach

asset関数はlaravelのpublicフォルダから見た時に、どこにあるのかを引数として指定する

-----------------------------------------------------------------------------------------------------

php artisan route:list 有効になっているルート設定の一覧を表示

-----------------------------------------------------------------------------------------------------

php artisan make:controller TestController
⇒controllerを継承するTestControllerをControllersに作る

php artisan make:model Post -m
modelを継承したPostクラスが書かれた
⇒app/Modelsの中にPost.phpファイルが作成される

最後に-mを入れることで、モデルファイル作成時に、マイグレートファイルも同時に作成できる

--------------------------------------------------------------------------------------------------

実行したマイグレーションの操作をやり直したい時は、ロールバックコマンドが使う

バッチごとにマイグレートを取り消し(downメソッドに書いた内容が適用される)

php artisan migrate:rollback
ロールバックの後、マイグレーションファイルを修正して、また php artisan migrate を実行すれば大丈夫

なおバッチは、データベースのmigrationsテーブルで確認できる。

migrationsの一番右側の列が「batch」。

たとえばbatchが「2」となっている状況で、ロールバックを行うと1つ前の状態になり、batchの数が1つずつ減る

その後、再度ロールバックを行うと、batchが「1」となっているマイグレーションを取り消せる

---------------------------------------------------------------------------
//マイグレーションファイルの作成    migration以降は分かりやすい名前をつけていく
php artisan make:migration add_column_user_id_to_posts_table --table=posts
--table=～テーブル名でカラムを追加するテーブルを指定
上のコマンドの場合、add_column_user_id_to_posts_tableという名のpostsと
紐付けるテーブル作成のためのマイグレーションファイルをmigrationsに追加

---------------------------------------------------------------------
php artisan migrate:reset   バッチごとに関係なくすべてのマイグレートを取り消す

php artisan migrate:refresh     すべてのマイグレートを取り消した後、再度マイグレートを行う

※rollback、reset、refreshいずれも取り消しコマンドを実行すると、削除したテーブル内にあるデータも消えるので注意
-----------------------------------------------------------------------------------

**/



?>
